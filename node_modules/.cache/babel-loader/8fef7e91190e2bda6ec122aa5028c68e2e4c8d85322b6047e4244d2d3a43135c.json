{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this.url = baseUrl;\n    this.headers = headers;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getUserInfo() {\n    return fetch(`${this.url}/users/me`, {\n      headers: this.headers\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  getInitialCards() {\n    return fetch(`${this.url}/cards`, {\n      headers: this.headers\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  setUserInfo(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    return fetch(`${this.url}/users/me`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  addNewCard(_ref3) {\n    let {\n      title,\n      link\n    } = _ref3;\n    return fetch(`${this.url}/cards`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: title,\n        link: link\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  deleteUserCard(cardId) {\n    return fetch(`${this.url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  updateUserAvatar(_ref4) {\n    let {\n      avatar\n    } = _ref4;\n    return fetch(`${this.url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this.url}/cards/${cardId}/likes`, {\n      method: isLiked ? 'PUT' : 'DELETE',\n      headers: this.headers\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n}\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\n  headers: {\n    authorization: '8fdce149-9bec-467e-96d2-64987568c2dd',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","headers","url","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","then","getInitialCards","setUserInfo","_ref2","name","about","method","body","JSON","stringify","addNewCard","_ref3","title","link","deleteUserCard","cardId","updateUserAvatar","_ref4","avatar","changeLikeCardStatus","isLiked","api","authorization"],"sources":["/Users/aleksejolejnik/dev/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor({baseUrl, headers}) {\n    this.url = baseUrl;\n    this.headers = headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(`${this.url}/users/me`, {\n      headers: this.headers\n    }).then(res => {\n      return this._checkResponse(res);\n    })\n  }\n\n  getInitialCards() {\n    return fetch(`${this.url}/cards`, {\n      headers: this.headers\n    }).then(res => {\n      return this._checkResponse(res);\n    })\n  }\n\n  setUserInfo({name, about}) {\n    return fetch(`${this.url}/users/me`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    })\n  }\n\n  addNewCard({title, link}) {\n    return fetch(`${this.url}/cards`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: title,\n        link: link\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    })\n  }\n\n  deleteUserCard(cardId) {\n    return fetch(`${this.url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => {\n      return this._checkResponse(res);\n    })\n  }\n\n  updateUserAvatar({avatar}) {\n    return fetch(`${this.url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    })\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this.url}/cards/${cardId}/likes`, {\n      method: isLiked ? 'PUT' : 'DELETE',\n      headers: this.headers\n    }).then(res => {\n      return this._checkResponse(res);\n    })\n  }\n}\n\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\n  headers: {\n    authorization: '8fdce149-9bec-467e-96d2-64987568c2dd',\n    'Content-Type': 'application/json'\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}