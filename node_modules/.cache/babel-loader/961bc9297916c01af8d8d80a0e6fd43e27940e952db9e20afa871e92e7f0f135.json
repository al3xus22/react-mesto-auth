{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\nexport const register = _ref => {\n  let {\n    email,\n    password\n  } = _ref;\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n};\nexport const authorize = _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n};","map":{"version":3,"names":["BASE_URL","register","_ref","email","password","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","status","authorize","_ref2","getContent","token"],"sources":["/Users/aleksejolejnik/dev/react-mesto-auth/src/utils/Auth.js"],"sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nexport const register = ({email, password}) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({email, password}),\n  })\n    .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n}\n\nexport const authorize = ({email, password}) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({email, password}),\n  })\n    .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n}\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      \"Content-Type\": \"application/json\",\n      \"Authorization\" : `Bearer ${token}`,\n    }\n  })\n}"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAA+B;AAEvD,OAAO,MAAMC,QAAQ,GAAGC,IAAA,IAAuB;EAAA,IAAtB;IAACC,KAAK;IAAEC;EAAQ,CAAC,GAAAF,IAAA;EACxC,OAAOG,KAAK,CAAE,GAAEL,QAAS,SAAQ,EAAE;IACjCM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAACP,KAAK;MAAEC;IAAQ,CAAC;EACxC,CAAC,CAAC,CACCO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC,CAAC;AAC/E,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGC,KAAA,IAAuB;EAAA,IAAtB;IAAChB,KAAK;IAAEC;EAAQ,CAAC,GAAAe,KAAA;EACzC,OAAOd,KAAK,CAAE,GAAEL,QAAS,SAAQ,EAAE;IACjCM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAACP,KAAK;MAAEC;IAAQ,CAAC;EACxC,CAAC,CAAC,CACCO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC,CAAC;AAC/E,CAAC;AAED,OAAO,MAAMG,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOhB,KAAK,CAAE,GAAEL,QAAS,WAAU,EAAE;IACnCM,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAI,UAASc,KAAM;IACpC;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}